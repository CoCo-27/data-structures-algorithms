Majority of the times these are all the data structures and algorithms you will need to answer most questions:

Data structures:

    * Arrays
    * Stacks
    * Queues
    * Linked lists
    * Trees
    * Tries
    * Graphs
    * Hash tables

Algorithms:

    * Sorting
    * Dynamic programming
    * Breadth first and Depth first search
    * Recursion

---

Heurestics for solving problems:

    * Hash Maps are usually the answer to improve Time Complexity
    * If it's a sorted array, use Binary tree to achieve O(log N). Divide and Conquer - Divide a data set
      into smaller chunks and then repeating a process with a subset of data. Binary search is a great example of this
    * Try Sorting your input
    * Hash tables and precomputed information (i.e. sorted) are some of the best ways to optimize your code
    * Look at the Time vs Space tradeoff. Sometimes storing extra state in memory can help the time.
    * If the interviewer is giving you advice/tips/hints. Follow them
    * Space time tradeoffs: Hastables usually solve this a lot of the times. You use more space, but you
      can get a time optimization to the process. In programming, you often times can use up a little bit
      more space to get faster time

---

Arrays (aka "Lists"):

    We know the index:

        Lookups     - O(1)

    After insert or delete the rest of the items need to be shifted/their place updated:

        Insert      - O(n)
        Delete      - O(n)

    It's at the end so no other val needs to be updated:

        Append      - O(1)

    2 types of arrays:

        1. Static arrays    - you define how many items an array will hold when making the array, low level languages like C has these
        2. Dynamic arrays   - high level languages like JavaScript and Python uses these, automatically allocates space in memory (i.e. expands) based on value length

    ** Treat string problems as array problems, most can be solved using arrays

