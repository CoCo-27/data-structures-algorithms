Majority of the times these are all the data structures and algorithms you will need to answer most questions:

Data structures:

    * Arrays
    * Stacks
    * Queues
    * Linked lists
    * Trees
    * Tries
    * Graphs
    * Hash tables

Algorithms:

    * Sorting
    * Dynamic programming
    * Breadth first and Depth first search
    * Recursion

---

Heurestics for solving problems:

    * Hash Maps are usually the answer to improve Time Complexity
    * If it's a sorted array, use Binary tree to achieve O(log N). Divide and Conquer - Divide a data set
      into smaller chunks and then repeating a process with a subset of data. Binary search is a great example of this
    * Try Sorting your input
    * Hash tables and precomputed information (i.e. sorted) are some of the best ways to optimize your code
    * Look at the Time vs Space tradeoff. Sometimes storing extra state in memory can help the time.
    * If the interviewer is giving you advice/tips/hints. Follow them
    * Space time tradeoffs: Hastables usually solve this a lot of the times. You use more space, but you
      can get a time optimization to the process. In programming, you often times can use up a little bit
      more space to get faster time

---

Pointers:

    * Simply a reference to something in memory:

        const obj1 = { a: 'hey' };
        const obj2 = obj1;

        both of these vars point to the 1 object that exists in memory. But doing:

            delete obj1;

        doesn't get rid of { a: 'hey' }, since it's still being referenced by obj2. If ob2's value is changed to something else:

            obj2 = 'is now a string';

        at this point { a: 'hey' } is erased from memory by JavaScript's automatic garbage collection since it's not in use anywhere

    * In lower level languages where you have to manage your own memory, you need to delete pointers that aren't needed anymore in order
      to free up resources
